#!/usr/bin/env python3
"""
Script de teste para verificar se a l√≥gica est√° pulando usu√°rios j√° classificados
"""

import asyncio
import logging
from database import DatabaseManager
from main import ConversationClassifier

# Configurar logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)

logger = logging.getLogger(__name__)

async def test_skip_logic():
    """Testa se a l√≥gica est√° pulando usu√°rios j√° classificados"""
    logger.info("üß™ Iniciando teste de verifica√ß√£o de pulo de usu√°rios j√° classificados")
    
    db = DatabaseManager()
    classifier = ConversationClassifier()
    
    try:
        # 1. Verificar usu√°rios n√£o classificados inicialmente
        logger.info("üìä Verificando usu√°rios n√£o classificados...")
        unclassified_initial = await db.get_unclassified_users()
        logger.info(f"Usu√°rios n√£o classificados inicialmente: {len(unclassified_initial)}")
        
        if not unclassified_initial:
            logger.warning("‚ùå Nenhum usu√°rio n√£o classificado encontrado para teste")
            return
        
        # 2. Pegar alguns usu√°rios para teste
        test_users = unclassified_initial[:3]  # Testar com 3 usu√°rios
        logger.info(f"üîç Usu√°rios selecionados para teste: {test_users}")
        
        # 3. Processar o primeiro usu√°rio normalmente
        logger.info("üîÑ Processando primeiro usu√°rio...")
        result1 = await classifier.process_user(test_users[0])
        logger.info(f"Resultado do primeiro usu√°rio: {result1['status']}")
        
        # 4. Tentar processar o mesmo usu√°rio novamente
        logger.info("üîÑ Tentando processar o mesmo usu√°rio novamente...")
        result2 = await classifier.process_user(test_users[0])
        logger.info(f"Resultado da segunda tentativa: {result2['status']}")
        
        # 5. Verificar se foi pulado
        if result2['status'] == 'ja_classificado':
            logger.info("‚úÖ SUCESSO: Usu√°rio foi pulado corretamente!")
        else:
            logger.error("‚ùå FALHA: Usu√°rio n√£o foi pulado!")
        
        # 6. Verificar usu√°rios n√£o classificados ap√≥s o teste
        logger.info("üìä Verificando usu√°rios n√£o classificados ap√≥s teste...")
        unclassified_after = await db.get_unclassified_users()
        logger.info(f"Usu√°rios n√£o classificados ap√≥s teste: {len(unclassified_after)}")
        
        # 7. Verificar se o usu√°rio testado foi removido da lista
        if test_users[0] not in unclassified_after:
            logger.info("‚úÖ SUCESSO: Usu√°rio foi removido da lista de n√£o classificados!")
        else:
            logger.error("‚ùå FALHA: Usu√°rio ainda est√° na lista de n√£o classificados!")
        
        # 8. Testar com m√∫ltiplos usu√°rios
        logger.info("üîÑ Testando processamento em lote...")
        processed_count = 0
        skipped_count = 0
        
        for user_id in test_users:
            result = await classifier.process_user(user_id)
            if result['status'] == 'concluido':
                processed_count += 1
            elif result['status'] == 'ja_classificado':
                skipped_count += 1
            logger.info(f"Usu√°rio {user_id}: {result['status']}")
        
        logger.info(f"üìà Resultado do teste em lote: {processed_count} processados, {skipped_count} pulados")
        
        # 9. Verifica√ß√£o final
        final_unclassified = await db.get_unclassified_users()
        logger.info(f"üìä Usu√°rios n√£o classificados finais: {len(final_unclassified)}")
        
        # Verificar se os usu√°rios de teste foram removidos
        test_users_remaining = [u for u in test_users if u in final_unclassified]
        if not test_users_remaining:
            logger.info("‚úÖ SUCESSO: Todos os usu√°rios de teste foram processados/removidos!")
        else:
            logger.warning(f"‚ö†Ô∏è Usu√°rios de teste ainda n√£o classificados: {test_users_remaining}")
        
        logger.info("üéâ Teste conclu√≠do!")
        
    except Exception as e:
        logger.error(f"‚ùå Erro durante o teste: {e}")

async def test_database_consistency():
    """Testa a consist√™ncia do banco de dados"""
    logger.info("üîç Testando consist√™ncia do banco de dados...")
    
    db = DatabaseManager()
    
    try:
        # Verificar se a tabela classificacoes existe
        conn = await db.get_connection()
        
        # Verificar estrutura da tabela
        columns = await conn.fetch("""
            SELECT column_name, data_type 
            FROM information_schema.columns 
            WHERE table_name = 'classificacoes'
            ORDER BY ordinal_position
        """)
        
        logger.info("üìã Estrutura da tabela classificacoes:")
        for col in columns:
            logger.info(f"  - {col['column_name']}: {col['data_type']}")
        
        # Verificar √≠ndices
        indexes = await conn.fetch("""
            SELECT indexname, indexdef 
            FROM pg_indexes 
            WHERE tablename = 'classificacoes'
        """)
        
        logger.info("üîó √çndices da tabela classificacoes:")
        for idx in indexes:
            logger.info(f"  - {idx['indexname']}")
        
        # Contar registros
        total_count = await conn.fetchval("SELECT COUNT(*) FROM classificacoes")
        logger.info(f"üìä Total de classifica√ß√µes no banco: {total_count}")
        
        await conn.close()
        
    except Exception as e:
        logger.error(f"‚ùå Erro ao verificar banco: {e}")

async def main():
    """Fun√ß√£o principal do teste"""
    logger.info("üöÄ Iniciando testes de verifica√ß√£o...")
    
    await test_database_consistency()
    await test_skip_logic()

if __name__ == "__main__":
    asyncio.run(main()) 