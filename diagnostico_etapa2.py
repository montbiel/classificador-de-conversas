#!/usr/bin/env python3
"""
Diagn√≥stico da ETAPA 2 - Problemas na cria√ß√£o das tabelas
"""

import os
from dotenv import load_dotenv

def diagnostico_etapa2():
    print("=" * 60)
    print("üîç DIAGN√ìSTICO - ETAPA 2")
    print("=" * 60)
    
    # 1. Verificar arquivo .env
    print("1Ô∏è‚É£ VERIFICANDO ARQUIVO .ENV:")
    if os.path.exists('.env'):
        print("   ‚úÖ Arquivo .env existe")
        load_dotenv()
        db_url = os.getenv('DATABASE_URL')
        if db_url:
            print(f"   ‚úÖ DATABASE_URL encontrada: {db_url[:50]}...")
        else:
            print("   ‚ùå DATABASE_URL n√£o encontrada")
    else:
        print("   ‚ùå Arquivo .env n√£o existe")
    
    print()
    
    # 2. Verificar script SQL
    print("2Ô∏è‚É£ VERIFICANDO SCRIPT SQL:")
    if os.path.exists('etapa2_setup_database.sql'):
        print("   ‚úÖ Script SQL existe")
        with open('etapa2_setup_database.sql', 'r') as f:
            content = f.read()
            if 'CREATE TABLE' in content:
                print("   ‚úÖ Script cont√©m comandos CREATE TABLE")
            else:
                print("   ‚ùå Script n√£o cont√©m comandos CREATE TABLE")
    else:
        print("   ‚ùå Script SQL n√£o existe")
    
    print()
    
    # 3. Poss√≠veis problemas
    print("3Ô∏è‚É£ POSS√çVEIS PROBLEMAS:")
    print("   üî¥ PostgreSQL n√£o est√° rodando")
    print("   üî¥ Banco 'redfine_core' n√£o existe")
    print("   üî¥ Credenciais incorretas (usu√°rio/senha)")
    print("   üî¥ Permiss√µes insuficientes para criar tabelas")
    print("   üî¥ Erro de sintaxe no script SQL")
    print("   üî¥ Cliente PostgreSQL n√£o conectou corretamente")
    
    print()
    
    # 4. Solu√ß√µes
    print("4Ô∏è‚É£ SOLU√á√ïES:")
    print("   ‚úÖ Verifique se o PostgreSQL est√° rodando")
    print("   ‚úÖ Verifique se o banco 'redfine_core' existe")
    print("   ‚úÖ Teste as credenciais no pgAdmin/DBeaver")
    print("   ‚úÖ Execute o script SQL linha por linha")
    print("   ‚úÖ Verifique se h√° mensagens de erro")
    
    print()
    
    # 5. Comandos SQL individuais
    print("5Ô∏è‚É£ COMANDOS SQL PARA TESTAR:")
    print("   -- Teste 1: Verificar conex√£o")
    print("   SELECT version();")
    print()
    print("   -- Teste 2: Verificar se o banco existe")
    print("   SELECT current_database();")
    print()
    print("   -- Teste 3: Criar tabela chat_history")
    print("   CREATE TABLE IF NOT EXISTS chat_history (")
    print("       id SERIAL PRIMARY KEY,")
    print("       user_id INTEGER NOT NULL,")
    print("       message TEXT NOT NULL,")
    print("       timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,")
    print("       message_type VARCHAR(50) DEFAULT 'text'")
    print("   );")
    
    print("=" * 60)

if __name__ == "__main__":
    diagnostico_etapa2() 