#!/usr/bin/env python3
"""
Teste r√°pido de conex√£o com timeout
"""

import os
import psycopg2
import socket
from dotenv import load_dotenv

def test_connection():
    print("üîç Teste r√°pido de conectividade...")
    
    # Carregar vari√°veis de ambiente
    load_dotenv()
    db_url = os.getenv('DATABASE_URL')
    
    if not db_url:
        print("‚ùå DATABASE_URL n√£o encontrada no .env")
        return False
    
    print(f"üì° URL do banco: {db_url}")
    
    # Teste 1: Verificar se o host est√° acess√≠vel
    try:
        print("üîó Testando conectividade com 127.0.0.1:5432...")
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(5)  # 5 segundos de timeout
        result = sock.connect_ex(('127.0.0.1', 5432))
        sock.close()
        
        if result == 0:
            print("‚úÖ Host 127.0.0.1:5432 est√° acess√≠vel")
        else:
            print("‚ùå Host 127.0.0.1:5432 n√£o est√° acess√≠vel")
            print("   Verifique se o PostgreSQL est√° rodando")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro no teste de conectividade: {e}")
        return False
    
    # Teste 2: Tentar conex√£o com timeout
    try:
        print("üîê Tentando conex√£o com o banco...")
        
        # Converter URL asyncpg para psycopg2
        if 'asyncpg' in db_url:
            db_url = db_url.replace('postgresql+asyncpg://', 'postgresql://')
        
        # Conectar com timeout
        conn = psycopg2.connect(db_url, connect_timeout=10)
        print("‚úÖ Conex√£o estabelecida com sucesso!")
        
        # Teste r√°pido
        cursor = conn.cursor()
        cursor.execute("SELECT 1")
        result = cursor.fetchone()
        print(f"‚úÖ Query de teste: {result}")
        
        cursor.close()
        conn.close()
        return True
        
    except psycopg2.OperationalError as e:
        print(f"‚ùå Erro operacional: {e}")
        print("\nüîß Poss√≠veis causas:")
        print("1. PostgreSQL n√£o est√° rodando")
        print("2. Banco 'redfine_core' n√£o existe")
        print("3. Credenciais incorretas")
        print("4. Firewall bloqueando conex√£o")
        return False
        
    except Exception as e:
        print(f"‚ùå Erro inesperado: {e}")
        return False

if __name__ == "__main__":
    print("=" * 50)
    print("TESTE R√ÅPIDO DE CONEX√ÉO")
    print("=" * 50)
    
    success = test_connection()
    
    if success:
        print("\nüéâ Banco de dados acess√≠vel!")
        print("   Execute o script SQL: etapa2_setup_database.sql")
    else:
        print("\n‚ùå Problemas de conectividade detectados")
    
    print("=" * 50) 