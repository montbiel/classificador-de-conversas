#!/usr/bin/env python3
"""
Teste do classificador baseado em tags
"""

import asyncio
from tag_based_classifier import TagBasedClassifier

async def test_tag_classifier():
    # Testar classificador com IA
    classifier_ai = TagBasedClassifier(use_ai=True)
    
    # Testar classificador apenas com palavras-chave
    classifier_keywords = TagBasedClassifier(use_ai=False)
    
    # Casos de teste espec√≠ficos
    test_cases = [
        {
            "name": "Problemas financeiros: sem dinheiro",
            "messages": [
                {"message": "Ol√°, n√£o tenho dinheiro para pagar o curso", "timestamp": "2024-01-15 10:00:00", "role": "user"},
                {"message": "Estou sem grana no momento", "timestamp": "2024-01-15 10:01:00", "role": "user"}
            ]
        },
        {
            "name": "D√∫vidas sobre boleto",
            "messages": [
                {"message": "Como fa√ßo para gerar o boleto?", "timestamp": "2024-01-15 10:00:00", "role": "user"},
                {"message": "O boleto n√£o chegou no meu email", "timestamp": "2024-01-15 10:01:00", "role": "user"}
            ]
        },
        {
            "name": "Problema: site n√£o abre",
            "messages": [
                {"message": "O site n√£o est√° abrindo", "timestamp": "2024-01-15 10:00:00", "role": "user"},
                {"message": "N√£o consigo acessar a p√°gina", "timestamp": "2024-01-15 10:01:00", "role": "user"}
            ]
        },
        {
            "name": "N√£o gostou: conte√∫do do curso",
            "messages": [
                {"message": "N√£o gostei do conte√∫do do curso", "timestamp": "2024-01-15 10:00:00", "role": "user"},
                {"message": "O material n√£o √© bom", "timestamp": "2024-01-15 10:01:00", "role": "user"}
            ]
        },
        {
            "name": "Inseguran√ßa: n√£o se sente preparado",
            "messages": [
                {"message": "N√£o me sinto preparado para trabalhar", "timestamp": "2024-01-15 10:00:00", "role": "user"},
                {"message": "N√£o tenho confian√ßa", "timestamp": "2024-01-15 10:01:00", "role": "user"}
            ]
        },
        {
            "name": "Atendimento: n√£o respondeu d√∫vida",
            "messages": [
                {"message": "Minha d√∫vida n√£o foi respondida", "timestamp": "2024-01-15 10:00:00", "role": "user"},
                {"message": "N√£o recebi resposta sobre minha pergunta", "timestamp": "2024-01-15 10:01:00", "role": "user"}
            ]
        }
    ]
    
    print("üß™ TESTE DO CLASSIFICADOR BASEADO EM TAGS")
    print("=" * 50)
    
    for i, test_case in enumerate(test_cases, 1):
        print(f"\nüìã Teste {i}: {test_case['name']}")
        print(f"   Mensagens: {[msg['message'] for msg in test_case['messages']]}")
        
        # Testar com palavras-chave
        result_keywords = await classifier_keywords.classify_conversation(test_case['messages'])
        print(f"   üîç Palavras-chave: {result_keywords['classification']} (confian√ßa: {result_keywords['confidence']:.2f})")
        print(f"      Contexto: {result_keywords['context']}")
        
        # Testar com IA (se dispon√≠vel)
        if classifier_ai.ai_available:
            result_ai = await classifier_ai.classify_conversation(test_case['messages'])
            print(f"   ü§ñ IA: {result_ai['classification']} (confian√ßa: {result_ai['confidence']:.2f})")
            print(f"      Contexto: {result_ai['context']}")
        else:
            print("   ü§ñ IA: N√£o dispon√≠vel")
    
    print("\n" + "=" * 50)
    print("‚úÖ Teste conclu√≠do!")

if __name__ == "__main__":
    asyncio.run(test_tag_classifier()) 